const token="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";const inputTxt=document.getElementById("user-input");const image=document.getElementById("image");const button=document.getElementById("send-buttonn");const status=document.getElementById("status");const downloadBtn=document.getElementById("downloadBtn");const historyList=document.getElementById("historyList");const toggleHistoryBtn=document.getElementById("toggleHistoryBtn");const fullscreenHistory=document.getElementById("fullscreenHistory");const closeFullscreenBtn=document.getElementById("closeFullscreenBtn");let showingDownloadedImages=false;button.addEventListener('click', async function (){const userInput=inputTxt.value.trim(); status.classList.remove("hidden"); status.textContent="Your image is being generated..."; image.src=""; downloadBtn.classList.add("hidden"); const response=await query(userInput); if (response){const objectURL=URL.createObjectURL(response); image.src=objectURL; status.textContent="Image generated successfully!"; downloadBtn.classList.remove("hidden"); downloadBtn.href=objectURL; downloadBtn.download="generated-image.png"; saveDownloadToHistory(objectURL); if (showingDownloadedImages){displayDownloadHistory();}}});async function query(input){console.log("Query function called with input:", input); try{const response=await fetch( "https://api-inference.huggingface.co/models/XLabs-AI/flux-RealismLora",{headers:{Authorization: `Bearer ${token}`}, method: "POST", body: JSON.stringify({"inputs": input}),}); console.log("Received response from API"); if (!response.ok){const errorMessage=await response.text(); throw new Error(`Error ${response.status}: ${errorMessage}`);}const result=await response.blob(); return result;}catch (error){console.error("Error occurred:", error.message); status.textContent="Failed to generate image. Please try again.{or try after sometime, (server overload)";}}function saveDownloadToHistory(imageURL){let downloadHistory=JSON.parse(localStorage.getItem('downloadHistory')) || []; let downloadEntry={url: imageURL, timestamp: new Date().toISOString()}; downloadHistory.push(downloadEntry); localStorage.setItem('downloadHistory', JSON.stringify(downloadHistory));}function displayDownloadHistory(){let downloadHistory=JSON.parse(localStorage.getItem('downloadHistory')) || []; historyList.innerHTML=''; downloadHistory.forEach(entry=>{let listItem=document.createElement('li'); listItem.innerHTML=` <img src="${entry.url}" alt="Downloaded Image"> <a href="${entry.url}" target="_blank">View Image</a> - Downloaded on: ${new Date(entry.timestamp).toLocaleString()}`; historyList.appendChild(listItem);});}